{"version":3,"sources":["../../../source/test/library/visitor.test.js"],"names":[],"mappings":"AAAA,SAAS,aAAa,IAAI,aAA1B,QAA+C,QAA/C;AACA,OAAO,KAAP,MAAkB,aAAlB;AACA,OAAO,IAAP,MAAiB,KAAjB;;AAEA,MAAM,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,IAAP,CAAY,GAAb,CAA7B;;AAEA,IAAI,CAAC,iCAAD,EAAoC,OAAO,IAAP,KAAgB;;AAEtD,MAAI,MAAM,GAAG,gCAAb;AACA,MAAI,MAAM,GAAG;AACX,eAAW;AACT,IAAA,OAAO,CAAC,OAAR,CAAgB,gCAAhB,CADS,CADA,EAAb;;;;AAMA,MAAI,EAAE,IAAI,EAAE,aAAR,KAA0B,MAAM,KAAK,CAAC,cAAN,CAAqB,MAArB,EAA6B,MAA7B,CAApC;AACA,MAAI,eAAe,GAAG,iCAAtB;;AAEA;AACA,EAAA,IAAI,CAAC,EAAL,CAAQ,aAAR,EAAuB,eAAvB;;AAED,CAfG,CAAJ;;AAiBA,IAAI,CAAC,0CAAD,EAA6C,OAAO,IAAP,KAAgB;;AAE/D,MAAI,MAAM,GAAG,gCAAb;AACA,MAAI,MAAM,GAAG;AACX,eAAW;AACT,IAAA,OAAO,CAAC,OAAR,CAAgB,yCAAhB,CADS,CADA,EAAb;;;;AAMA,MAAI,EAAE,IAAI,EAAE,aAAR,KAA0B,MAAM,KAAK,CAAC,cAAN,CAAqB,MAArB,EAA6B,MAA7B,CAApC;AACA,MAAI,eAAe,GAAG,iCAAtB;;AAEA;AACA,EAAA,IAAI,CAAC,EAAL,CAAQ,aAAR,EAAuB,eAAvB;;AAED,CAfG,CAAJ;;AAiBA,IAAI,CAAC,yCAAD,EAA4C,OAAO,IAAP,KAAgB;;AAE9D,MAAI,MAAM,GAAG,gCAAb;AACA,MAAI,MAAM,GAAG;AACX,eAAW;AACT,IAAA,OAAO,CAAC,OAAR,CAAgB,wCAAhB,CADS,CADA,EAAb;;;;AAMA,MAAI,EAAE,IAAI,EAAE,aAAR,KAA0B,MAAM,KAAK,CAAC,cAAN,CAAqB,MAArB,EAA6B,MAA7B,CAApC;AACA,MAAI,eAAe,GAAG,iCAAtB;;AAEA;AACA,EAAA,IAAI,CAAC,EAAL,CAAQ,aAAR,EAAuB,eAAvB;;AAED,CAfG,CAAJ","file":"visitor.test.js","sourcesContent":["import { createRequire as CreateRequire } from 'module'\nimport Babel from '@babel/core'\nimport Test from 'ava'\n\nconst Require = CreateRequire(import.meta.url)\n\nTest('plugins: [ reverse-identifier ]', async (test) => {\n\n  let codeIn = 'console.log(\\'Hello, world!\\')'\n  let option = { \n    'plugins': [ \n      Require.resolve('./reverse-identifier/index.cjs')\n    ]\n  }\n\n  let { code: actualCodeOut } = await Babel.transformAsync(codeIn, option)\n  let expectedCodeOut = 'elosnoc.gol(\\'Hello, world!\\');'\n\n  // test.log(actualCodeOut)\n  test.is(actualCodeOut, expectedCodeOut)\n\n})\n\nTest('plugins: [ reverse-identifier-on-enter ]', async (test) => {\n\n  let codeIn = 'console.log(\\'Hello, world!\\')'\n  let option = { \n    'plugins': [ \n      Require.resolve('./reverse-identifier-on-enter/index.cjs')\n    ]\n  }\n\n  let { code: actualCodeOut } = await Babel.transformAsync(codeIn, option)\n  let expectedCodeOut = 'elosnoc.gol(\\'Hello, world!\\');'\n\n  // test.log(actualCodeOut)\n  test.is(actualCodeOut, expectedCodeOut)\n\n})\n\nTest('plugins: [ reverse-identifier-on-exit ]', async (test) => {\n\n  let codeIn = 'console.log(\\'Hello, world!\\')'\n  let option = { \n    'plugins': [ \n      Require.resolve('./reverse-identifier-on-exit/index.cjs')\n    ]\n  }\n\n  let { code: actualCodeOut } = await Babel.transformAsync(codeIn, option)\n  let expectedCodeOut = 'elosnoc.gol(\\'Hello, world!\\');'\n\n  // test.log(actualCodeOut)\n  test.is(actualCodeOut, expectedCodeOut)\n\n})\n"]}