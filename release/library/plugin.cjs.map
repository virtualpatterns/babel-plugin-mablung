{"version":3,"sources":["../../source/library/plugin.cjs"],"names":["pascalCase","PascalCase","ChangeCase","Plugin","createPlugin","visitorClass","babel","visitorInstance","pluginObject","manipulateOptions","option","parserOption","console","dir","pre","state","onBeforeNode","post","onAfterNode","nodeType","visitorObject","forEach","onNodeName","path","onEnterNodeName","onExitNodeName","enter","exit","visitor"],"mappings":";;;;;;;AAAA;;;;;;AAEA,MAAM;AAAEA,EAAAA,UAAU,EAAEC;AAAd,IAA6BC,UAAnC;;AAEA,MAAMC,MAAN,CAAa;AAEX,SAAOC,YAAP,CAAoBC,YAApB,EAAkC;AAChC;AAEA,WAAO,UAASC,KAAT,EAAgB;AACrB;AAEA,UAAIC,eAAe,GAAG,IAAIF,YAAJ,CAAiBC,KAAjB,CAAtB;AAEA,UAAIE,YAAY,GAAG,EAAnB;;AAEAA,MAAAA,YAAY,CAACC,iBAAb,GAAiC,UAASC,MAAT,EAAiBC,YAAjB,EAA+B;AAC9DC,QAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACD,OAFD;;AAIAH,MAAAA,YAAY,CAACM,GAAb,GAAmB,UAASC,KAAT,EAAgB;AAAER,QAAAA,eAAe,CAACS,YAAhB,CAA6BD,KAA7B;AAAqC,OAA1E;;AACAP,MAAAA,YAAY,CAACS,IAAb,GAAoB,UAASF,KAAT,EAAgB;AAAER,QAAAA,eAAe,CAACW,WAAhB,CAA4BH,KAA5B;AAAoC,OAA1E;;AAEA,UAAII,QAAQ,GAAGZ,eAAe,CAACY,QAA/B;AACA,UAAIC,aAAa,GAAG,EAApB;AAEAD,MAAAA,QAAQ,CAACE,OAAT,CAAkBF,QAAD,IAAc;AAE7B,YAAIG,UAAU,GAAI,KAAIrB,UAAU,CAACkB,QAAD,CAAW,MAA3C;;AAEA,YAAIG,UAAU,IAAIf,eAAlB,EAAmC;AACjCa,UAAAA,aAAa,CAACD,QAAD,CAAb,GAA0B,UAASI,IAAT,EAAeR,KAAf,EAAsB;AAAER,YAAAA,eAAe,CAACe,UAAD,CAAf,CAA4BC,IAA5B,EAAkCR,KAAlC,EAAyC,IAAzC;AAAgD,WAAlG;AACD;;AAED,YAAIS,eAAe,GAAI,UAASvB,UAAU,CAACkB,QAAD,CAAW,MAArD;AACA,YAAIM,cAAc,GAAI,SAAQxB,UAAU,CAACkB,QAAD,CAAW,MAAnD;;AAEA,YAAIK,eAAe,IAAIjB,eAAnB,IACAkB,cAAc,IAAIlB,eADtB,EACuC;AAErCa,UAAAA,aAAa,CAACD,QAAD,CAAb,GAA0B;AAExBO,YAAAA,KAAK,CAACH,IAAD,EAAOR,KAAP,EAAc;AACjB,kBAAIS,eAAe,IAAIjB,eAAvB,EAAwC;AACtCA,gBAAAA,eAAe,CAACiB,eAAD,CAAf,CAAiCD,IAAjC,EAAuCR,KAAvC,EAA8C,IAA9C;AACD;AACF,aANuB;;AAQxBY,YAAAA,IAAI,CAACJ,IAAD,EAAOR,KAAP,EAAc;AAChB,kBAAIU,cAAc,IAAIlB,eAAtB,EAAuC;AACrCA,gBAAAA,eAAe,CAACkB,cAAD,CAAf,CAAgCF,IAAhC,EAAsCR,KAAtC,EAA6C,IAA7C;AACD;AACF;;AAZuB,WAA1B;AAgBD;AAEF,OAhCD;AAkCAP,MAAAA,YAAY,CAACoB,OAAb,GAAuBR,aAAvB;AAEA,aAAOZ,YAAP;AAED,KAvDD;AAyDD;;AA9DU","sourcesContent":["import * as ChangeCase from 'change-case'\n\nconst { pascalCase: PascalCase } = ChangeCase\n\nclass Plugin {\n\n  static createPlugin(visitorClass) {\n    // console.log(`Plugin.createPlugin(${visitorClass.name})`)\n\n    return function(babel) {\n      // console.log(`Plugin.createPlugin(${visitorClass.name})(babel)`)\n\n      let visitorInstance = new visitorClass(babel)\n\n      let pluginObject = {}\n\n      pluginObject.manipulateOptions = function(option, parserOption) {\n        console.dir(parserOption)\n      }\n\n      pluginObject.pre = function(state) { visitorInstance.onBeforeNode(state) }\n      pluginObject.post = function(state) { visitorInstance.onAfterNode(state) }\n\n      let nodeType = visitorInstance.nodeType\n      let visitorObject = {}\n\n      nodeType.forEach((nodeType) => {\n\n        let onNodeName = `on${PascalCase(nodeType)}Node`\n\n        if (onNodeName in visitorInstance) {\n          visitorObject[nodeType] = function(path, state) { visitorInstance[onNodeName](path, state, this) }\n        }\n\n        let onEnterNodeName = `onEnter${PascalCase(nodeType)}Node`\n        let onExitNodeName = `onExit${PascalCase(nodeType)}Node`\n\n        if (onEnterNodeName in visitorInstance ||\n            onExitNodeName in visitorInstance) {\n\n          visitorObject[nodeType] = { \n\n            enter(path, state) {\n              if (onEnterNodeName in visitorInstance) {\n                visitorInstance[onEnterNodeName](path, state, this)\n              }\n            }, \n\n            exit(path, state) {\n              if (onExitNodeName in visitorInstance) {\n                visitorInstance[onExitNodeName](path, state, this)\n              }\n            } \n\n          }\n\n        }\n\n      })\n\n      pluginObject.visitor = visitorObject\n\n      return pluginObject\n\n    }\n\n  }\n\n}\n\nexport { Plugin }\n"],"file":"plugin.cjs"}