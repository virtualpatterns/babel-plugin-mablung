{"version":3,"sources":["../../source/library/plugin.cjs"],"names":[],"mappings":";;;;;;;AAAA;;;;;;AAEA,MAAM;AAAE,EAAA,UAAU,EAAE;AAAd,IAA6B,UAAnC;;AAEA,MAAM,MAAN,CAAa;AAEQ,SAAZ,YAAY,CAAC,YAAD,EAAe;AAChC;AAEA,WAAO,UAAS,KAAT,EAAgB;AACrB;AAEA,UAAI,eAAe,GAAG,IAAI,YAAJ,CAAiB,KAAjB,CAAtB;AAEA,UAAI,YAAY,GAAG,EAAnB,CALqB,CAOrB;AACA;AACA;;AAEA,MAAA,YAAY,CAAC,GAAb,GAAmB,UAAS,KAAT,EAAgB;AAAE,QAAA,eAAe,CAAC,YAAhB,CAA6B,KAA7B;AAAqC,OAA1E;;AACA,MAAA,YAAY,CAAC,IAAb,GAAoB,UAAS,KAAT,EAAgB;AAAE,QAAA,eAAe,CAAC,WAAhB,CAA4B,KAA5B;AAAoC,OAA1E;;AAEA,UAAI,QAAQ,GAAG,eAAe,CAAC,QAA/B;AACA,UAAI,aAAa,GAAG,EAApB;AAEA,MAAA,QAAQ,CAAC,OAAT,CAAkB,QAAD,IAAc;AAE7B,YAAI,UAAU,GAAI,KAAI,UAAU,CAAC,QAAD,CAAW,MAA3C;;AAEA,YAAI,UAAU,IAAI,eAAlB,EAAmC;AACjC,UAAA,aAAa,CAAC,QAAD,CAAb,GAA0B,UAAS,IAAT,EAAe,KAAf,EAAsB;AAAE,YAAA,eAAe,CAAC,UAAD,CAAf,CAA4B,IAA5B,EAAkC,KAAlC,EAAyC,IAAzC;AAAgD,WAAlG;AACD;;AAED,YAAI,eAAe,GAAI,UAAS,UAAU,CAAC,QAAD,CAAW,MAArD;AACA,YAAI,cAAc,GAAI,SAAQ,UAAU,CAAC,QAAD,CAAW,MAAnD;;AAEA,YAAI,eAAe,IAAI,eAAnB,IACA,cAAc,IAAI,eADtB,EACuC;AAErC,UAAA,aAAa,CAAC,QAAD,CAAb,GAA0B;AAExB,YAAA,KAAK,CAAC,IAAD,EAAO,KAAP,EAAc;AACjB,kBAAI,eAAe,IAAI,eAAvB,EAAwC;AACtC,gBAAA,eAAe,CAAC,eAAD,CAAf,CAAiC,IAAjC,EAAuC,KAAvC,EAA8C,IAA9C;AACD;AACF,aANuB;;AAQxB,YAAA,IAAI,CAAC,IAAD,EAAO,KAAP,EAAc;AAChB,kBAAI,cAAc,IAAI,eAAtB,EAAuC;AACrC,gBAAA,eAAe,CAAC,cAAD,CAAf,CAAgC,IAAhC,EAAsC,KAAtC,EAA6C,IAA7C;AACD;AACF;;AAZuB,WAA1B;AAgBD;AAEF,OAhCD;AAkCA,MAAA,YAAY,CAAC,OAAb,GAAuB,aAAvB;AAEA,aAAO,YAAP;AAED,KAvDD;AAyDD;;AA9DU","file":"plugin.cjs","sourcesContent":["import * as ChangeCase from 'change-case'\n\nconst { pascalCase: PascalCase } = ChangeCase\n\nclass Plugin {\n\n  static createPlugin(visitorClass) {\n    // console.log(`Plugin.createPlugin(${visitorClass.name})`)\n\n    return function(babel) {\n      // console.log(`Plugin.createPlugin(${visitorClass.name})(babel)`)\n\n      let visitorInstance = new visitorClass(babel)\n\n      let pluginObject = {}\n\n      // pluginObject.manipulateOptions = function(option, parserOption) {\n      //   console.dir(parserOption)\n      // }\n\n      pluginObject.pre = function(state) { visitorInstance.onBeforeNode(state) }\n      pluginObject.post = function(state) { visitorInstance.onAfterNode(state) }\n\n      let nodeType = visitorInstance.nodeType\n      let visitorObject = {}\n\n      nodeType.forEach((nodeType) => {\n\n        let onNodeName = `on${PascalCase(nodeType)}Node`\n\n        if (onNodeName in visitorInstance) {\n          visitorObject[nodeType] = function(path, state) { visitorInstance[onNodeName](path, state, this) }\n        }\n\n        let onEnterNodeName = `onEnter${PascalCase(nodeType)}Node`\n        let onExitNodeName = `onExit${PascalCase(nodeType)}Node`\n\n        if (onEnterNodeName in visitorInstance ||\n            onExitNodeName in visitorInstance) {\n\n          visitorObject[nodeType] = { \n\n            enter(path, state) {\n              if (onEnterNodeName in visitorInstance) {\n                visitorInstance[onEnterNodeName](path, state, this)\n              }\n            }, \n\n            exit(path, state) {\n              if (onExitNodeName in visitorInstance) {\n                visitorInstance[onExitNodeName](path, state, this)\n              }\n            } \n\n          }\n\n        }\n\n      })\n\n      pluginObject.visitor = visitorObject\n\n      return pluginObject\n\n    }\n\n  }\n\n}\n\nexport { Plugin }\n"]}